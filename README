NAME: Forrest Burton
EMAIL: burton.forrest10@gmail.com
ID: 005324612
SLIPDAYS: 

QUESTION 2.1.1 - causing conflicts:
Why does it take many iterations before errors are seen?
Why does a significantly smaller number of iterations so seldom fail?


QUESTION 2.1.2 - cost of yielding:
Why are the --yield runs so much slower?
The --yield runs much slower because the sched_yield() function temporarily makes each thread give up its time slice and therefore its control of 
the CPU,therefore it takes much more time to execute the add() function for all the threads since they are giving up time slices. Waking up and
sleeping threads adds a lot of overhead.

Where is the additional time going?
The additional time is going towards threads "yielding" the CPU or their time slice 

Is it possible to get valid per-operation timings if we are using the --yield option?
If so, explain how. If not, explain why not.


QUESTION 2.1.3 - measurement errors:
Why does the average cost per operation drop with increasing iterations?
If the cost per iteration is a function of the number of iterations, how do we know how many iterations to run (or what the "correct" cost is)?

QUESTION 2.1.4 - costs of serialization:
Why do all of the options perform similarly for low numbers of threads?
Why do the three protected operations slow down as the number of threads rises?

The tarball contains:
lab2_add.c:   C program which contains a shared variable add function. The program has the following options: --threads, --iterations.
              The progam outputs a CSV including: name of the test, number of threads, number of iterations, number of operations,
              total run time (in nanoseconds), average time per operation (in nanoseconds), and the total at end of the run
lab2_list.c:  C program which outputs statistics after initializing an empty list and has the following options: --threads, --iterations, 
              --yield. The program creates threads then records stastics. The program ouptuts a CSV including: name of test, number of
              threads, number of iterations, number of lists, total number of operations performed, total run time (nanoseconds), average 
              time per operation (nanoseconds).
SortedList.c: C module which contains the following methods for implementing a double linked list: insert, delete, lookup, and length
SortedList.h: Header file which describes the API for the double linked list operation
Makefile:     contains options default build, dist, clean, tests, and graphs

Recourses:
**Discussion 1B very helpful
Converting string to int - https://stackoverflow.com/questions/7021725/how-to-convert-a-string-to-integer-in-c
Multithreading in C - https://www.geeksforgeeks.org/multithreading-c-2/
pthread_create(3) man page - https://man7.org/linux/man-pages/man3/pthread_create.3.html
timespec error - https://stackoverflow.com/questions/11153334/timespec-not-found-in-time-h
clock_gettime(3) man page - https://linux.die.net/man/3/clock_gettime
pthread_mutex_init(3) man page - https://linux.die.net/man/3/pthread_mutex_init
pthread_mutex_lock(3) man page - https://linux.die.net/man/3/pthread_mutex_lock
copying string to buffer - https://stackoverflow.com/questions/25838628/copying-string-literals-in-c-into-an-character-array/25838679
strcat in C - https://www.holbertonschool.com/coding-resource-strcat-in-c
fprintf vs printf - https://stackoverflow.com/questions/4627330/difference-between-fprintf-printf-and-sprintf